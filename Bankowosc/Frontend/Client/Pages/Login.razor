@page "/login"


@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Logowanie</h3>

<div>
    <EditForm Model="userLoginDTO" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>Login:</p>
        <InputText @bind-Value="userLoginDTO.Login" id="email" class="form-control"></InputText>
        <p>Hasło:</p>
        <InputText @bind-Value="userLoginDTO.Password" id="password" type="password" class="form-control"></InputText>
        <br/>
        <button type="submit" class="btn btn-primary w-100 my-4 mb-2" >Login In</button>

    </EditForm>
    
    @if (logging)
    {
        <div class="loader"></div>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
</div>

@code {

    private UserLoginDTO userLoginDTO = new UserLoginDTO();
    private string message = string.Empty;
    private bool logging = false;

    private async Task HandleLogin()
    {
        logging = true;
        message = string.Empty;
        var result = await AuthService.Login(userLoginDTO);
        if (result.Success)
        {
            await LocalStorageService.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            logging = false;
            NavigationManager.NavigateTo("/");
        }
        else
        {
            logging = false;
            message = result.Message;
        }
    }


}