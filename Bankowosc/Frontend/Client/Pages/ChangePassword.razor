@page "/changepassword"
<h3>Zmień hasło</h3>

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<div>
    <EditForm Model="changePasswordDto" OnValidSubmit="HandleChangePassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>Stare hasło:</p>
        <InputText @bind-Value="changePasswordDto.LastPassword" id="email" type="password" class="form-control"></InputText>
        <p>Nowe Hasło:</p>
        <InputText @bind-Value="changePasswordDto.NewPassword" id="password" type="password" class="form-control"></InputText>
        <p>Potwierdz hasło:</p>
        <InputText @bind-Value="changePasswordDto.ConfirmPassword" id="password2" type="password" class="form-control"></InputText>
        <br/>
        <button type="submit" class="btn btn-primary w-100 my-4 mb-2" >Zmień hasło</button>

    </EditForm>
    
    @if (logging)
    {
        <div class="loader"></div>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
</div>
@code {
    private ChangePasswordDto changePasswordDto = new ChangePasswordDto();
    private bool logging = false;
    private string message;
    private async Task HandleChangePassword()
    {
        logging = true;
        message = "";
        bool res =  await AuthService.ChangePassword(changePasswordDto);
        if (res)
        {
           
            changePasswordDto = new ChangePasswordDto();
            message = "Hasło zostało zmienione";
        }
        else
        {
            
            message = "Nie udało się zmienić hasła";
        }
        logging = false;
    }
}
